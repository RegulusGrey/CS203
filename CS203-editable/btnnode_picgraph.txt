/*private void btnAdjacentNodes_Click(object sender, EventArgs e)
        {
            if (stopcreate == true) 
            {
                //set or define the adjacent of two nodes
                int edge1 = Convert.ToInt32(txtEdge1.Text);
                int edge2 = Convert.ToInt32(txtEdge2.Text);

                //split the coordinates of x, and y of the edges
                string[] c1 = vertices[edge1].Split('-');
                string[] c2 = vertices[edge2].Split('-');

                //cast it to integer and store it to another variable
                int xcoordinate1 = Convert.ToInt32(c1[0]);//coordinate of edge1
                int ycoordinate1 = Convert.ToInt32(c1[1]);//coordinate of edge1

                int xcoordinate2 = Convert.ToInt32(c2[0]);//coordinate of edge2
                int ycoordinate2 = Convert.ToInt32(c2[1]);//coordinate of edge2

                //after retrieving the x and y coordinate, we will draw a line
                graph.DrawLine(new Pen(Brushes.Teal, 2), (float)(xcoordinate1 + (35/2)), (float)(ycoordinate1 + (35/2)), (float)(xcoordinate2 + (35/2)), (float)(ycoordinate2 + (35/2)));

                //calculate distance
                double x = (double)(xcoordinate2 - xcoordinate1);
                double y = (double)(ycoordinate2 - ycoordinate1);
                double d = Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2));
                int a = (int)(xcoordinate1 + xcoordinate2) / 2;
                int b = (int)((ycoordinate1 + ycoordinate2) / 2)-5;
                graph.DrawString(Math.Round(d, 2).ToString(), new Font("Arial", 10), Brushes.MidnightBlue, a, b);

                //adjacent matrix(undirected graph - no arrows)
                matrix[edge1, edge2] = Convert.ToInt32(d); // the same distance
                matrix[edge2, edge1] = Convert.ToInt32(d);

                //if it is adjacent, display 1 otherwise 0
                setAdjacentMatrix(int.Parse(txtEdge1.Text),int.Parse(txtEdge2.Text));
                
                
            }                        
        }

        

        private void picGraph_MouseClick(object sender, MouseEventArgs e)
        {
            //when you click the mouse at the letside
            if (e.Button == MouseButtons.Left && stopcreate != true)
            {
                Rectangle rect = new Rectangle((e.X)-(35/2), (e.Y)-(35/2), 35, 35);

                //define the locaiton of x and y coordinate and the size of the nodes that created
                graph.FillEllipse(Brushes.PaleVioletRed, rect);

                graph.DrawString(countnodes.ToString(), new Font("Arial Black", 10), Brushes.White, ((e.X) - (35 / 2)) + 10, ((e.Y) - (35 / 2)) + 11);
                //the number that will appear base in the counter if the nodes that been

                vertices[countnodes] = ((e.X) - (35 / 2)) + "-" + ((e.Y) - (35 / 2));

                //the maker of color of the nodes
                countnodes++;

                //increment another node to draw in the datagridview
                dataGridView1.Columns.Add("", (countnodes - 1).ToString());
                dataGridView1.AutoResizeColumns();

                dataGridView1.Rows.Add();
                dataGridView1.Rows[countnodes - 1].HeaderCell.Value = (countnodes - 1).ToString();
                dataGridView1.AutoResizeRows();

                //Filling every cell to 0
                setAdjacentMatrixToZero(countnodes);


            }
            else 
            {
                stopcreate = true;
            }

        }*/